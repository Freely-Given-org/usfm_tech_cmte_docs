#!/usr/bin/python3

import os, sys, argparse
try:
    from usfmtc.parser import UsfmParser, XmlParser, RailRoad, XMLRailRoad
except ImportError:
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'lib'))
    from usfmtc.parser import UsfmParser, XmlParser, RailRoad, XMLRailRoad
from usfmtc.usxgrammar import alljobs
import xml.etree.ElementTree as et

parser = argparse.ArgumentParser()
parser.add_argument("-g","--grammar",required=True,help="USX grammar file")
parser.add_argument("-o","--outdir",required=True,help="Output directory for generated svgs")
parser.add_argument("-n","--node",help="Process a single node")
parser.add_argument("-C","--charwidth",type=float,default=6.,help="Average width of characters to use")
parser.add_argument("-z","--debug",type=int,default=0,help="bit 0 - print job name")
args = parser.parse_args()

rdoc = et.parse(args.grammar)
backendsfm = RailRoad()
backendxml = XMLRailRoad()
sfmproc = UsfmParser(rdoc, backendsfm)
xmlproc = XmlParser(rdoc, backendxml)

if args.node:
    jobs = {args.node: alljobs[args.node]}
else:
    jobs = alljobs 

for k, j in jobs.items():
    keeps = j[1] if len(j) > 1 else []
    for a in (("rail", True), ("usx", False)):
        if not a[1] and len(j) > 2:
            keeps = keeps + j[2]
        if args.debug & 1:
            print(f"{j[0]}_{a[0]}")
        #rdia = RDiagram(k, rdoc, keeps=keeps, cwidth=args.charwidth)
        #rgram.makediagram(k, rdia=rdia, usfm=a[1])
        back = backendsfm if a[1] else backendxml
        proc = sfmproc if a[1] else xmlproc
        p = proc
        if p.parseRef(k, flattens=keeps) is None:
            continue
        outfile = os.path.join(args.outdir, "{}_{}.svg".format(j[0], a[0]))
        with open(outfile, "w", encoding="utf-8") as outf:
            d = back.output(p.curr, color='rgb(210, 255, 210)' if a[1] else 'rgb(210, 210, 255)')
            d.writeSvg(outf.write)
