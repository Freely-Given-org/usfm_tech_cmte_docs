#!/usr/bin/python3

import os, sys, argparse
try:
    from usfmtc.sfmrail import SFMRail
    #from usfmtc.railrelax import ETDoc, RGrammar, RDiagram
except ImportError:
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'lib'))
    #from usfmtc.railrelax import ETDoc, RGrammar, RDiagram
    from usfmtc.sfmrail import SFMRail
from usfmtc.parserelax import ETDoc, Grammar, RelaxXMLParser, RelaxUSFMParser

parser = argparse.ArgumentParser()
parser.add_argument("-g","--grammar",required=True,help="USX grammar file")
parser.add_argument("-o","--outdir",required=True,help="Output directory for generated svgs")
parser.add_argument("-n","--node",help="Process a single node")
parser.add_argument("-C","--charwidth",type=float,default=6.,help="Average width of characters to use")
parser.add_argument("-z","--debug",type=int,default=0,help="bit 0 - print job name")
args = parser.parse_args()

rdoc = ETDoc(args.grammar)
rgram = Grammar(rdoc)
rgram.parse(rdoc.getroot())
backend = SFMRail()

alljobs = {
    "BookHeaders":          ("bkhdrs", tuple(), ("BookHeaders.para.style.enum",)),
    "BookTitles":           ("bktitles", tuple(), ("BookTitles.para.style.enum",)),
    "BookIntroduction":     ("bkintro", tuple(), ('BookIntroduction.para.style.enum',)),
    "BookIntroductionEndTitles": ("bkintroend", ("BookIntroductionEndTitles.para.style.enum",)),
    "Chapter":              ("chapter", ("ChapterStart", "ChapterEnd")),
    "Char":                 ("char", ("Char.char.style.enum", "+char.closed", "Break",
                                        "CharWithAttrib.enum", "CharContent"), ("+char.link", )),
    "CharEmbed":            ("charembed", ("Char.char.style.enum", "+char.closed", "Break",
                                            "CharWithAttrib.enum"), ("+char.link", )),
    "CharWithAttrib.char.style.w": ("w", ("Break", "+char.closed"), ("+char.link", )),
    "CharWithAttrib.char.style.rb": ("rb", ("Break", "+char.closed"), ("+char.link", )),
    "CrossReference":       ("crossref",),
    "CrossReferenceChar":   ("xchar",("CrossReferenceChar.char.style.enum", "+char.closed")),
    "Figure":               ("fig",),
    "Footnote":             ("f", tuple(), ("category", )),
    "FootnoteChar":         ("fchar", ("FootnoteVerse", "FootnoteChar.char.style.enum", "char.closed")),
    "FootnoteReference":    ("ref",),
    "List":                 ("list", tuple(), ("List.para.style.enum",)),
    "ListChar":             ("listchar", ("+char.closed",), ("ListChar.char.style.enum",)),
    "Milestone":            ("ms", ("MilestoneWithAttrib.enum", "MilestoneWithAttrib.ms.style.qt")),
    "Para":                 ("p", ("Para.para.style.enum", "Break")),
    "Scripture":            ("id", ("BookIdentification", "BookIdentification.book.code.enum")),
    "Table":                ("table", ("TableContent",)),
    "Verse":                ("verse", ("VerseStart", "VerseEnd")),
    "category":             ("cat",),
    "char.link":            ("link",),
}

if args.node:
   jobs = {args.node: alljobs[args.node]}
else:
    jobs = alljobs 

for k, j in jobs.items():
    keeps = j[1] if len(j) > 1 else []
    for a in (("rail", True), ("usx", False)):
        if not a[1] and len(j) > 2:
            keeps = keeps + j[2]
        if args.debug & 1:
            print(f"{j[0]}_{a[0]}")
        #rdia = RDiagram(k, rdoc, keeps=keeps, cwidth=args.charwidth)
        #rgram.makediagram(k, rdia=rdia, usfm=a[1])
        p = (RelaxUSFMParser if a[1] else RelaxXMLParser)(rdoc, backend, rgram, keeps)
        rgram.parseRef(k, parser=p, quietRefs=False)
        outfile = os.path.join(args.outdir, "{}_{}.svg".format(j[0], a[0]))
        with open(outfile, "w", encoding="utf-8") as outf:
            d = backend.output(p.curr, color='rgb(210, 255, 210)' if a[1] else 'rgb(210, 210, 255)')
            d.writeSvg(outf.write)
