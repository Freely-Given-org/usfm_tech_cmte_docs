#!/usr/bin/env python3

import argparse, os, sys, logging, re

try:
    from usfmtc.sfmparser import UsfmParserBackend, parseusfm, NoParseError
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'lib'))
    from usfmtc.sfmparser import UsfmParserBackend, parseusfm, NoParseError
from usfmtc.parser import UsfmParser, XmlParser
import xml.etree.ElementTree as et

allpartypes = {
    'Section': """ms mse ms1 ms2 ms2e ms3 ms3e mr s s1 s2 s3 s4 s1e s2e s3e s4e sr r sp
                    sd1 sd2 sd3 sd4 periph"""
}

partypes = {e: k for k, v in allpartypes.items() for e in v.split()}

def writexml(outf, root):
    outf.write('<?xml version="1.0" encoding="utf-8"?>\n')
    qnames, ns = et._namespaces(root, None)
    _serialize_xml(outf.write, root, qnames, ns, True)
    outf.write("\n")

def _serialize_xml(write, elem, qnames, namespaces, short_empty_elements, **kwargs):
    tag = elem.tag
    text = elem.text
    tag = qnames[tag]
    if tag is None:
        if text:
            write(et._escape_cdata(text))
        for e in elem:
            _serialize_xml(write, e, qnames, None, short_empty_elements)
    else:
        write("<" + tag)
        items = list(elem.items())
        if items or namespaces:
            if namespaces:
                for v, k in sorted(namespaces.items(), key=lambda x: x[1]):  # sort on prefix
                    if k:
                        k = ":" + k
                    write(" xmlns%s=\"%s\"" % (k, et._escape_attrib(v)))
            for k, v in items:
                if not k.startswith(" ") and v is not None:
                    v = et._escape_attrib(v)
                    write(" %s=\"%s\"" % (qnames[k], v))
        if text or len(elem) or not short_empty_elements:
            write(">")
            if text:
                write(et._escape_cdata(text))
            for e in elem:
                _serialize_xml(write, e, qnames, None, short_empty_elements)
            write("</" + tag + ">")
        else:
            write(" />")
    if elem.tail:
        write(et._escape_cdata(elem.tail))

def getindex(base):
    parent = base.get(' parent')
    return list(parent).index(base), parent

def getprevious(base):
    i, parent = getindex(base)
    return parent[i-1] if i > 0 else None

def addprevious(base, el):
    i, parent = getindex(base)
    parent.insert(i, el)

def getnext(base):
    i, parent = getindex(base)
    return parent[i+1] if i < len(parent) - 1 else None

def addvids(root):
    lastv = None
    if root.get('version', None) is None:
        root.set('version', '3.0')
    bkel = root.find('./book')
    bk = bkel.get('code', 'UNK')
    currchap = 0
    lastp = None
    for v in list(root.iter()):
        if v.tag == "chapter":
            currchap = v.get('number')
            currverse = 0
            v.set('sid', "{} {}".format(bk, currchap))
            continue
        elif v.tag == "para":
            lastp = v
            continue
        elif v.tag != "verse":
            continue
        if v.get('eid', None) is not None:
            continue
        currverse = v.get('number')
        v.set('sid', "{} {}:{}".format(bk, currchap, currverse))
        if lastv is None:
            lastv = v
            continue
        eid = lastv.get('sid', None)
        ev = v.makeelement('verse', {'eid': eid or ""})
        pv = v.get(' parent')
        pl = lastv.get(' parent')
        if id(pv) == id(pl):
            addprevious(v, ev) 
        else:
            endp = pl
            pl = getnext(endp)
            block = False
            while pl is not None:
                if pl.tag == 'para' and partypes.get(pl.get('style', None), None) != 'Section':
                    if not block and (pl.text or (len(pl) and pl[0].tag != 'verse')):
                        pl.set('vid', eid)
                        endp = pl
                elif id(pl) != id(pv):
                    block = True
                else:
                    break
                pl = getnext(pl)
            if not block and getindex(v)[0] > 0 or not (pv.text is None or pv.text == ""):
                addprevious(v, ev)
            else:
                endp.append(ev)
        lastv = v
    if lastv is not None and lastp is not None:
        eid = lastv.get('sid')
        ev = lastv.makeelement('verse', {'eid': eid or ''})
        pl = lastv.get(' parent')
        block = False
        endp = lastp
        while pl is not None:
            if pl.tag == 'para' and partypes.get(pl.get('style', None), None) != 'Section':
                if pl.text or (len(pl) and pl[0].tag != 'verse'):
                    pl.set('vid', eid)
                    endp = pl
            elif id(pl) != id(lastp):
                block = True
            else:
                break
            pl = getnext(pl)
        endp.append(ev)

    lastc = None
    for c in root.findall('.//chapter'):
        if lastc is not None:
            cel = c.makeelement('chapter', {'eid': lastc.get('sid', '')})
            addprevious(c, cel)
        lastc = c
    if lastc is not None:
        root.append(lastc.makeelement('chapter', {'eid': lastc.get('sid', '')}))

    for r in root.findall('.//row'):
        p = getprevious(r)
        if p is not None and p.tag == 'row':
            newp = p.get(' parent')
            i, oldp = getindex(r)
            oldp[i] = newp
        else:
            # there's a bug here, surely newp is never attached
            i, oldp = getindex(r)
            newp = r.makeelement('table', {})
            oldp.remove(r)
            oldp.insert(i, newp)
            r.set(' parent', newp)
        newp.set(' parent', oldp)
        newp.append(r)
    return root

def cleanup(node):
    if node.tag == 'para':
        i = -1
        if len(node) and node[i].tag == 'verse' and node[i].get('eid', None) is not None:
            i -= 1
        if len(node) >= -i:
            if node[i].tail is not None:
                node[i].tail = node[i].tail.rstrip()
        elif node.text is not None:
            node.text = node.text.strip()
    for c in node:
        cleanup(c)

def strnormal(s, t):
    if s is None:
        return ""
    if not len(s.strip()):
        return ""
    if t in ('para', 'char'):
        return re.sub("[\n\s]+", " ", s)
    else:
        return s.strip()

def attribnorm(d):
    banned = ('closed',)
    return {k:v for k, v in d.items() if k not in banned and not k.startswith(" ")}

def etCmp(a, b):
    aattrib = attribnorm(a.attrib)
    battrib = attribnorm(b.attrib)
    if a.tag != b.tag or aattrib != battrib:
        return False
    if strnormal(a.text, a.tag) != strnormal(b.text, b.tag):
        return False
    if strnormal(a.tail, a.tag) != strnormal(b.tail, b.tag):
        return False
    if len(a) != len(b):
        return False
    for ac, bc in zip(a, b):
        if not etCmp(ac, bc):
            return False
    return True

def proconedir(d, sfmp, args):
    meta = {}
    print(f"{d}: ", end='', flush=True)
    doc = et.parse(os.path.join(d, "metadata.xml"))
    for e in doc.getroot():
        meta[e.tag] = e.text
    try:
        result = parseusfm(os.path.join(d, "origin.usfm"), sfmp)
    except NoParseError:
        result = None
    if result is not None:
        if (args.debug & 1) != 0:
            print(result)
        xml = result.asEt()
        addvids(xml)
        cleanup(xml)
        if args.print:
            writexml(sys.stdout, xml)
        if os.path.exists(os.path.join(d, "origin.xml")):
            testxml = et.parse(os.path.join(d, "origin.xml"))
            passed = etCmp(xml, testxml.getroot())
    else:
        passed = False
    expected = meta.get('validated', 'pass') == 'pass'
    res = passed == expected
    print("{} ({} {})".format("Passed" if res else "Failed", "==" if res else "!=", "Pass" if expected else "Fail"))

parser = argparse.ArgumentParser()
parser.add_argument("directory",help="A single or tree of test directories")
parser.add_argument("-g","--grammar",required=True,help="Enhanced usx.rng RELAXng grammar")
parser.add_argument("-S","--start",default="Scripture",help="Starting node for parsing")
parser.add_argument("-P","--print",action="store_true",help="Print generated xml")
parser.add_argument("-l","--logging",help="Set logging level to usfmxtest.log")
parser.add_argument("-z","--debug",type=int,default=0,help="1=print tree")
args = parser.parse_args()

if args.logging:
    try:
        loglevel = int(args.logging)
    except ValueError:
        loglevel = getattr(logging, args.logging.upper(), None)
    if isinstance(loglevel, int):
        parms = {'level': loglevel, 'datefmt': '%d/%b/%Y %H:%M:%S', 'format': '%(asctime)s.%(msecs)03d %(levelname)s:%(module)s(%(lineno)d) %(message)s'}
        logfh = open("usfmxtest.log", "w", encoding="utf-8")
        parms.update(stream=logfh, filemode="w") #, encoding="utf-8")
        try:
            logging.basicConfig(**parms)
        except FileNotFoundError as e:      # no write access to the log
            print("Exception", e)
    log = logging.getLogger('usfmxtest')

jobs = []
for dp, dns, fns in os.walk(args.directory):
    if 'metadata.xml' in fns:
        jobs.append(dp)

rdoc = et.parse(args.grammar)
backendsfm = UsfmParserBackend()
sfmproc = UsfmParser(rdoc, backendsfm)
sfmproc.parseRef(args.start)

for j in jobs:
    proconedir(j, sfmproc.curr, args)

